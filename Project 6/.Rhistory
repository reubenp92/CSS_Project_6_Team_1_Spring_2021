Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- filter (sum_matched [3] <=.1)  # standard mean difference
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
# <-sum_matched[apply(sum_matched[3], 1, function(x) any(x <= .1 )), ]
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
smd_balance <- sum_balance %>% filter_at(vars(), all_vars(. <= .1))
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
smd_balance <- smd_balance %>% filter_at(vars(), all_vars(. <= .1))
smd_balance
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
smd_balance <- smd_balance %>% filter_at( all_vars(. <= .1))
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
smd_balance <- smd_balance %>% filter_at(vars(x) all_vars(x <= .1))
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
smd_balance <- smd_balance %>% filter_at(vars() all_vars(x <= .1))
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
smd_balance <- smd_balance %>% filter_at(vars() all_vars(. <= .1))
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
smd_balance <- smd_balance %>% filter_at (vars() all_vars (. <= .1))
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
smd_balance <- smd_balance %>% filter_at (tbl() all_vars (. <= .1))
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
smd_balance <- smd_balance %>% filter_at (tbl(), all_vars (. <= .1))
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
smd_balance <- smd_balance %>% filter_at (vars(), all_vars (. <= .1))
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
smd_balance <- smd_balance %>% filter_at (.vars(), all_vars (. <= .1))
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] # standard mean difference
#smd_balance <- smd_balance %>% filter_at (vars(), all_vars (. <= .1))
filter_all(smd_balance, all_vars(.<=.1))
# <-sum_matched[apply(sum_matched[3], 1, function(x) any(x <= .1 )), ]
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] %>% filter_all(all_vars(.<=.1)) # standard mean difference
#smd_filter_all(smd_balance, all_vars(.<=.1))
smd_balance
# Remove post-treatment covariates
set.seed(10)
ypsps_pc <- ypsps %>%
select(!(contains('1973')|contains('1982')))
# Simulate random selection of features 10k+ times
s <-10
# create an empty list for storing the models
models_list <- list()
# create empty vectors for storage
ATT_full <- c()
smd_prop <- c()
smd_mean <- c()
# loop through random numbers of random covariates and create matchit model objects
for(i in 1:s){
samp_df <- ypsps_pc %>% select(-c(college,student_ppnscal)) # drop treatment and outcome for the covariate sampling
# grab a random number of random column indices
covs <- sample(1:ncol(samp_df),sample(1:ncol(samp_df),1))
# subset the dataframe using the vector of column indices
m_df <- ypsps_pc %>% select(c(covs,"college","student_ppnscal")) # always keep the treatment indicator and the outcome
mdf_nomiss <- m_df %>% drop_na() # MatchIt does not allow missing values
# construct character string for formula, subtracting treatment and outcome
cov_names <- names(select(mdf_nomiss,-c(college,student_ppnscal)))
form_char <- paste0("college ~ ",paste0(cov_names,collapse=' + '), sep = " ")
# run the matching algothrim on all the variables in the df
result <- matchit(formula = as.formula(form_char), data = mdf_nomiss, method = "full", distance = "glm") # store it
models_list[[i]] <- result
match_full_att_summ <- summary(result) # get summary object
# store prop std mean diff meeting the >= .1 threshold
smd_prop[i] <- sum(match_full_att_summ$sum.all[,3] <= .1)/length(match_full_att_summ$sum.all[,3])
# store mean pct improvement in std mean diff
smd_mean[i] <- mean(match_full_att_summ$reduction[,1])
match_full_att_data <- match.data(result) # recover matched dataset
form_char2 <- paste0("student_ppnscal ~ ",paste0(cov_names,collapse=' + '), sep = " + college") # construct character string for second formula
# estimate the ATT
lm_full_att <- lm(as.formula(form_char2), data = match_full_att_data, weights = weights)
ATT_full[i] <- lm_full_att$coefficients["college"] # store estimate for college
}
plots <- data.frame(ATT_full, smd_mean, smd_prop)
# Remove post-treatment covariates
set.seed(1000)
ypsps_pc <- ypsps %>%
select(!(contains('1973')|contains('1982')))
# Load tidyverse and MatchIt
# Feel free to load other libraries as you wish
library(tidyverse)
library(MatchIt)
# Load ypsps data
ypsps <- read_csv('data/ypsps.csv')
head(ypsps)
# Load tidyverse and MatchIt
# Feel free to load other libraries as you wish
library(tidyverse)
library(MatchIt)
# Load ypsps data
ypsps <- read_csv('data/ypsps.csv')
head(ypsps)
# Select covariates that represent the "true" model for selection, fit model
match_full_ate <- matchit(formula = college ~ parent_Money + parent_EducHH + parent_Race + student_GPA + student_community + student_FamTalk, method = 'full', data = ypsps, estimand = 'ATE')
summary(match_full_ate)
# Plot the balance for the top 10 covariates
plot(match_full_ate, type = "qq", interactive = FALSE,
which.xs = c("parent_Money", "parent_EducHH", "parent_Race", "student_GPA", "student_community", "student_FamTalk"))
ate.sum <- summary(match_full_ate)
plot(ate.sum, var.order="unmatched", threshold = c(.1,.05))
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] %>% filter_all(all_vars(.<=.1)) # variables with standard mean difference <=.1
# Remove post-treatment covariates
set.seed(10)
ypsps_pc <- ypsps %>%
select(!(contains('1973')|contains('1982')))
# Simulate random selection of features 10k+ times
s <-1000
# create an empty list for storing the models
models_list <- list()
# create empty vectors for storage
ATT_full <- c()
smd_prop <- c()
smd_mean <- c()
# loop through random numbers of random covariates and create matchit model objects
for(i in 1:s){
samp_df <- ypsps_pc %>% select(-c(college,student_ppnscal)) # drop treatment and outcome for the covariate sampling
# grab a random number of random column indices
covs <- sample(1:ncol(samp_df),sample(1:ncol(samp_df),1))
# subset the dataframe using the vector of column indices
m_df <- ypsps_pc %>% select(c(covs,"college","student_ppnscal")) # always keep the treatment indicator and the outcome
mdf_nomiss <- m_df %>% drop_na() # MatchIt does not allow missing values
# construct character string for formula, subtracting treatment and outcome
cov_names <- names(select(mdf_nomiss,-c(college,student_ppnscal)))
form_char <- paste0("college ~ ",paste0(cov_names,collapse=' + '), sep = " ")
# run the matching algothrim on all the variables in the df
result <- matchit(formula = as.formula(form_char), data = mdf_nomiss, method = "full", distance = "glm") # store it
models_list[[i]] <- result
match_full_att_summ <- summary(result) # get summary object
# store prop std mean diff meeting the >= .1 threshold
smd_prop[i] <- sum(match_full_att_summ$sum.all[,3] <= .1)/length(match_full_att_summ$sum.all[,3])
# store mean pct improvement in std mean diff
smd_mean[i] <- mean(match_full_att_summ$reduction[,1])
match_full_att_data <- match.data(result) # recover matched dataset
form_char2 <- paste0("student_ppnscal ~ ",paste0(cov_names,collapse=' + '), sep = " + college") # construct character string for second formula
# estimate the ATT
lm_full_att <- lm(as.formula(form_char2), data = match_full_att_data, weights = weights)
ATT_full[i] <- lm_full_att$coefficients["college"] # store estimate for college
}
# Install packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(# Tidyverse packages including dplyr and ggplot2
tidyverse,
dagitty,
ggdag,
AER)
theme_set(theme_dag())
source("pretty_dag.R")
ex_dag5 <- dagify(Y ~ A,
Y ~ U_YA,
Y ~ W,
A ~ U_YA,
A ~ W,
A ~ Z,
W ~ Z,
Z ~ U_Z,
exposure = "A",
outcome = "Y") %>%
tidy_dagitty() %>%
pretty_dag()
ex_dag5 %>%
ggdag() +
geom_dag_edges() +
geom_dag_node(aes(color = color)) +
geom_dag_text(col = "white") +
theme(legend.position = "none") +
scale_color_manual(values=c("darkred", "lightgrey", "darkgrey", "navy", "darkgreen"))
n = 1e4 # Number of individuals (smaller than last time)
# NOTE: Again, don't worry too much about how we're creating this dataset,
# this is just an example.
df <- data.frame(U_Z = rnorm(n, mean=50, sd=5),
U_YA = rbinom(n, size = 1, prob = 0.34),
W = sample(0:2, size = n, replace = TRUE,
prob = c(0.49,0.50,0.01)),
eps = rnorm(n)
)
df <- df %>%
mutate(Z = 1.2*U_Z + 5,
A = as.numeric(rbernoulli(n,
p = (0.03 + 0.06*(W > 0) + 0.7*(Z < 60) + 0.21*(U_YA == 1)))),
Y = 5 - 4*A + 1*W + 3*U_YA)
head(df)
summary(df)
lm_out1 <- lm(Z ~ A + W, data = df)
summary(lm_out1)
Z_hat <- lm_out1$fitted.valyes
cov_za <- cov(df$Z, df$A)
lm_out2 <- lm(Z~A+W, data = df)
summary(lm_out2)
cov_zy <- cov(df$Z, df$Y)
beta_hat <- cov_za/cov_zy
beta_hat
lm_out3 <- ivreg(Y ~ A + W | W + Z, data = df)
summary(lm_out3)
lm_out1 <- lm(Z ~ A + W, data = df)
summary(lm_out1)
Z_hat <- lm_out1$fitted.values
cov_za <- cov(df$Z, df$A)
lm_out2 <- lm(Z~A+W, data = df)
summary(lm_out2)
cov_zy <- cov(df$Z, df$Y)
beta_hat <- cov_za/cov_zy
beta_hat
lm_out3 <- ivreg(Y ~ A + W | W + Z, data = df)
summary(lm_out3)
# Remove post-treatment covariates
set.seed(10)
ypsps_pc <- ypsps %>%
select(!(contains('1973')|contains('1982')))
# Simulate random selection of features 10k+ times
s <-100
# create an empty list for storing the models
models_list <- list()
# create empty vectors for storage
ATT_full <- c()
smd_prop <- c()
smd_mean <- c()
# loop through random numbers of random covariates and create matchit model objects
for(i in 1:s){
samp_df <- ypsps_pc %>% select(-c(college,student_ppnscal)) # drop treatment and outcome for the covariate sampling
# grab a random number of random column indices
covs <- sample(1:ncol(samp_df),sample(1:ncol(samp_df),1))
# subset the dataframe using the vector of column indices
m_df <- ypsps_pc %>% select(c(covs,"college","student_ppnscal")) # always keep the treatment indicator and the outcome
mdf_nomiss <- m_df %>% drop_na() # MatchIt does not allow missing values
# construct character string for formula, subtracting treatment and outcome
cov_names <- names(select(mdf_nomiss,-c(college,student_ppnscal)))
form_char <- paste0("college ~ ",paste0(cov_names,collapse=' + '), sep = " ")
# run the matching algothrim on all the variables in the df
result <- matchit(formula = as.formula(form_char), data = mdf_nomiss, method = "full", distance = "glm") # store it
models_list[[i]] <- result
match_full_att_summ <- summary(result) # get summary object
# store prop std mean diff meeting the >= .1 threshold
smd_prop[i] <- sum(match_full_att_summ$sum.all[,3] <= .1)/length(match_full_att_summ$sum.all[,3])
# store mean pct improvement in std mean diff
smd_mean[i] <- mean(match_full_att_summ$reduction[,1])
match_full_att_data <- match.data(result) # recover matched dataset
form_char2 <- paste0("student_ppnscal ~ ",paste0(cov_names,collapse=' + '), sep = " + college") # construct character string for second formula
# estimate the ATT
lm_full_att <- lm(as.formula(form_char2), data = match_full_att_data, weights = weights)
ATT_full[i] <- lm_full_att$coefficients["college"] # store estimate for college
}
# Plot ATT v. proportion
p <- ggplot(plots, aes(x = smd_prop, y = ATT_full)) +
geom_point(color = "blue") +
xlab('% covariates meeting .1 threshold') +
ylab('ATT') +
ggtitle('ATT versus Proportion')
plots <- data.frame(ATT_full, smd_mean, smd_prop)
# Plot ATT v. proportion
p <- ggplot(plots, aes(x = smd_prop, y = ATT_full)) +
geom_point(color = "blue") +
xlab('% covariates meeting .1 threshold') +
ylab('ATT') +
ggtitle('ATT versus Proportion')
p
# Plot ATT v. proportion
p <- ggplot(plots, aes(x = smd_prop, y = ATT_full)) +
geom_point(color = "blue") +
xlab('% covariates meeting .1 threshold') +
ylab('ATT') +
ggtitle('ATT versus Proportion')
p
# 10 random covariate balance plots (hint try gridExtra)
library(cobalt)
library(gridExtra)
model_inds <- sample(length(models_list),10) # sample 10 models and get their indices
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
do.call("grid.arrange", p)
install.packages('cobalt')
install.packages('cobalt')
install.packages("cobalt")
# 10 random covariate balance plots (hint try gridExtra)
library(cobalt)
library(gridExtra)
model_inds <- sample(length(models_list),10) # sample 10 models and get their indices
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
# Load tidyverse and MatchIt
# Feel free to load other libraries as you wish
library(tidyverse)
library(MatchIt)
# Load ypsps data
ypsps <- read_csv('data/ypsps.csv')
head(ypsps)
# Select covariates that represent the "true" model for selection, fit model
match_full_ate <- matchit(formula = college ~ parent_Money + parent_EducHH + parent_Race + student_GPA + student_community + student_FamTalk, method = 'full', data = ypsps, estimand = 'ATE')
summary(match_full_ate)
# Plot the balance for the top 10 covariates
plot(match_full_ate, type = "qq", interactive = FALSE,
which.xs = c("parent_Money", "parent_EducHH", "parent_Race", "student_GPA", "student_community", "student_FamTalk"))
ate.sum <- summary(match_full_ate)
plot(ate.sum, var.order="unmatched", threshold = c(.1,.05))
# Report the overall balance and the proportion of covariates that meet the balance threshold
sum_matched<-ate.sum$sum.matched
sum_matched<-as.data.frame(sum_matched)
Treat_score <-sum_matched[1] #means treated
Control_score <-sum_matched[2] #means control
smd_balance <- sum_matched [3] %>% filter_all(all_vars(.<=.1)) # variables with standard mean difference <=.1
# Remove post-treatment covariates
set.seed(10)
ypsps_pc <- ypsps %>%
select(!(contains('1973')|contains('1982')))
# Simulate random selection of features 10k+ times
s <-100
# create an empty list for storing the models
models_list <- list()
# create empty vectors for storage
ATT_full <- c()
smd_prop <- c()
smd_mean <- c()
# loop through random numbers of random covariates and create matchit model objects
for(i in 1:s){
samp_df <- ypsps_pc %>% select(-c(college,student_ppnscal)) # drop treatment and outcome for the covariate sampling
# grab a random number of random column indices
covs <- sample(1:ncol(samp_df),sample(1:ncol(samp_df),1))
# subset the dataframe using the vector of column indices
m_df <- ypsps_pc %>% select(c(covs,"college","student_ppnscal")) # always keep the treatment indicator and the outcome
mdf_nomiss <- m_df %>% drop_na() # MatchIt does not allow missing values
# construct character string for formula, subtracting treatment and outcome
cov_names <- names(select(mdf_nomiss,-c(college,student_ppnscal)))
form_char <- paste0("college ~ ",paste0(cov_names,collapse=' + '), sep = " ")
# run the matching algothrim on all the variables in the df
result <- matchit(formula = as.formula(form_char), data = mdf_nomiss, method = "full", distance = "glm") # store it
models_list[[i]] <- result
match_full_att_summ <- summary(result) # get summary object
# store prop std mean diff meeting the >= .1 threshold
smd_prop[i] <- sum(match_full_att_summ$sum.all[,3] <= .1)/length(match_full_att_summ$sum.all[,3])
# store mean pct improvement in std mean diff
smd_mean[i] <- mean(match_full_att_summ$reduction[,1])
match_full_att_data <- match.data(result) # recover matched dataset
form_char2 <- paste0("student_ppnscal ~ ",paste0(cov_names,collapse=' + '), sep = " + college") # construct character string for second formula
# estimate the ATT
lm_full_att <- lm(as.formula(form_char2), data = match_full_att_data, weights = weights)
ATT_full[i] <- lm_full_att$coefficients["college"] # store estimate for college
}
plots <- data.frame(ATT_full, smd_mean, smd_prop)
# Plot ATT v. proportion
p <- ggplot(plots, aes(x = smd_prop, y = ATT_full)) +
geom_point(color = "blue") +
xlab('% covariates meeting .1 threshold') +
ylab('ATT') +
ggtitle('ATT versus Proportion')
p
ATT_full
smd_prop
# 10 random covariate balance plots (hint try gridExtra)
library(cobalt)
library(gridExtra)
model_inds <- sample(length(models_list),1) # sample 10 models and get their indices
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
do.call("grid.arrange", p)
# 10 random covariate balance plots (hint try gridExtra)
library(cobalt)
library(gridExtra)
model_inds <- sample(length(models_list),2) # sample 10 models and get their indices
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
do.call("grid.arrange", p)
# 10 random covariate balance plots (hint try gridExtra)
library(cobalt)
library(gridExtra)
model_inds <- sample(length(models_list),1) # sample 10 models and get their indices
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
do.call("grid.arrange", p)
# 10 random covariate balance plots (hint try gridExtra)
library(cobalt)
library(gridExtra)
model_inds <- sample(length(models_list),1) # sample 10 models and get their indices
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
do.call("grid.arrange", p)
# 10 random covariate balance plots (hint try gridExtra)
library(cobalt)
library(gridExtra)
model_inds <- sample(length(models_list),1) # sample 10 models and get their indices
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
do.call("grid.arrange", p)
smd_balance
# 10 random covariate balance plots (hint try gridExtra)
set.seed(10)
library(cobalt)
library(gridExtra)
model_inds <- sample(length(models_list),1) # sample 10 models and get their indices
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
do.call("grid.arrange", p)
model_inds <- sample(length(models_list),1) # sample 10 models and get their indices
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
do.call("grid.arrange", p)
model_inds <- sample(length(models_list),1) # sample 10 models and get their indices
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
do.call("grid.arrange", p)
model_inds <- sample(length(models_list),1) # sample 10 models and get their indices
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
do.call("grid.arrange", p)
model_inds <- sample(length(models_list),1) # sample 10 models and get their indices
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
do.call("grid.arrange", p)
r_models <- sample(n, size=10)
for (i in r_models) {
model_inds <- models_list[[i]]
plot(model_inds, var.order = "unmatched", cex=0.5)
}
r_models <- sample(n, size=10)
for (i in r_models) {
model_inds <- models_list
plot(model_inds, var.order = "unmatched", cex=0.5)
}
r_models <- sample(n, size=10)
for (i in r_models) {
model_inds <- match_full_att_summ
plot(model_inds, var.order = "unmatched", cex=0.5)
}
r_models <- sample(n, size=10)
for (i in r_models) {
model_inds <- sample(length(models_list),1)
plot(model_inds, var.order = "unmatched", cex=0.5)
}
r_models <- sample(n, size=10)
for (i in r_models) {
model_inds <- summary(models_list[[i]])
plot(model_inds, var.order = "unmatched", cex=0.5)
}
r_models <- sample(n, size=10)
for (i in r_models) {
model_inds <- match_full_att_summ
plot(model_inds, var.order = "unmatched", cex=0.5)
}
random.seed(10)
set.seed(10)
r_models <- sample(n, size=10)
for (i in r_models) {
model_inds <- match_full_att_summ
plot(model_inds, var.order = "unmatched", cex=0.5)
}
set.seed(10)
r_models <- sample(n, size=10)
for (i in r_models) {
model_inds <- match_full_att_summ
p <- lapply(model_inds, function(i) love.plot(models_list[[i]], binary = "std"))
do.call("grid.arrange", p)
}
